<odoo>
    <data>
        <template id="countries" name="Trademeda Countries">
         <xpath expr="." position="inside">
            <link rel="stylesheet" type="text/css" href="/trademeda/static/src/css/countries.css"/>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"/>
        </xpath>

        <t t-call="trademeda.header"/>
        <div class="tab-buttons">
            <button onclick="buyer_countries(this)" class="active">Buyer</button>
            <button onclick="supplier_countries(this)" class="">Supplier</button>

        </div>
        <div slass="sorting">
            <div class="sorting_buttons">Sort By <i class="fa-solid fa-sort"></i> 
                <!-- <button onclick="sortCountriesAlphabetically(this)">Alphabetically</button>
                <button onclick="sortCountriesUsers(this)">Registered Users</button>  -->
                <div class="select-container" style="display: inline;">
                                                
                    <select onchange="handleSortChange(this)">
                        <option value="alphabetical">Alphabetically</option>
                        <option value="users">Registered Users</option>
                    </select>
                </div>
            </div>
        </div>
        <main id="countries_list" class="countries_list">
                <div id="buyer_countries" class="buyer_countries" style="display:flex;flex-wrap:wrap;flex-direction: column;">
                    <t t-set="countries_with_buyers" t-value="[
                        (country, env['res.partner'].sudo().search_count([('country_id', '=', country.id), ('member_type', 'in', ['buyer', 'both'])]))
                        for country in env['res.country'].sudo().search([])
                    ]"/>
                    <t t-set="sorted_countries_with_buyers" t-value="sorted(countries_with_buyers, key=lambda x: x[0].name)"/>
                    <t t-foreach="sorted_countries_with_buyers" t-as="country">
                        <div t-att-data-name="country[0].name" t-att-data-count="country[1]">
                            <a style="text-decoration:none;font-size:1.1rem;" class="country_link" t-att-countryId="country[0].id" t-attf-href="/findBuyers/country/{{country[0].id}}">
                                <img t-att-src="country[0].image_url" alt="" style="height:0.9rem;margin-right:0.5rem;"/>
                                <t t-esc="country[0].name"/>
                            </a>
                            <span> (<t t-esc="country[1]"/>)</span>
                        </div>
                    </t>
                </div>

                <div id="supplier_countries" class="supplier_countries" style="display:none;flex-wrap:wrap;flex-direction: column;">
                    <t t-set="countries_with_suppliers" t-value="[
                        (country, env['res.partner'].sudo().search_count([('country_id', '=', country.id), ('member_type', 'in', ['seller', 'both'])]))
                        for country in env['res.country'].sudo().search([])
                    ]"/>
                    <t t-set="sorted_countries_with_suppliers" t-value="sorted(countries_with_suppliers, key=lambda x: x[0].name)"/>
                    <t t-foreach="sorted_countries_with_suppliers" t-as="country">
                        <div t-att-data-name="country[0].name" t-att-data-count="country[1]">
                            <a style="text-decoration:none;font-size:1.1rem;" class="country_link" t-att-countryId="country[0].id" t-attf-href="/findSuppliers/country/{{country[0].id}}">
                                <img t-att-src="country[0].image_url" alt="" style="height:0.9rem;margin-right:0.5rem;"/>
                                <t t-esc="country[0].name"/>
                            </a>
                            <span> (<t t-esc="country[1]"/>)</span>
                        </div>
                    </t>
                </div>
            </main>
        <script>
                <![CDATA[
                    // Function to switch between buyer and supplier tabs
                    function buyer_countries(element) {
                        const buyer_countries = document.getElementById('buyer_countries');
                        const supplier_countries = document.getElementById('supplier_countries');
                        buyer_countries.style.display = 'flex';
                        supplier_countries.style.display = 'none';
                        element.classList.add('active');
                        element.nextElementSibling.classList.remove('active');
                    }

                    function supplier_countries(element) {
                        const buyer_countries = document.getElementById('buyer_countries');
                        const supplier_countries = document.getElementById('supplier_countries');
                        buyer_countries.style.display = 'none';
                        supplier_countries.style.display = 'flex';
                        element.classList.add('active');
                        element.previousElementSibling.classList.remove('active');
                    }

                    // Function to handle sorting based on the selected option
                    function handleSortChange(selectElement) {
                        const sortType = selectElement.value;
                        if (sortType === 'alphabetical') {
                            sortCountriesAlphabetically();
                        } else if (sortType === 'users') {
                            sortCountriesUsers();
                        }
                    }

                    // Function to sort countries alphabetically
                    function sortCountriesAlphabetically() {
                        console.log('sorting alphabetically');
                        sortCountries((a, b) => a.name.localeCompare(b.name));
                    }

                    // Function to sort countries by the number of users
                    function sortCountriesUsers() {
                        console.log('sorting by users');
                        sortCountries((a, b) => b.count - a.count);
                    }

                    // Generic function to sort countries
                    function sortCountries(sortFunction) {
                        const buyerCountriesList = document.getElementById('buyer_countries');
                        const supplierCountriesList = document.getElementById('supplier_countries');

                        // Extract and sort buyer countries
                        const buyerCountries = Array.from(buyerCountriesList.children).map(child => ({
                            element: child,
                            count: parseInt(child.querySelector('span').textContent.match(/\d+/)[0], 10),
                            name: child.querySelector('.country_link').textContent.trim(),
                            id: child.querySelector('.country_link').getAttribute('countryId')
                        })).sort(sortFunction);

                        // Extract and sort supplier countries
                        const supplierCountries = Array.from(supplierCountriesList.children).map(child => ({
                            element: child,
                            count: parseInt(child.querySelector('span').textContent.match(/\d+/)[0], 10),
                            name: child.querySelector('.country_link').textContent.trim(),
                            id: child.querySelector('.country_link').getAttribute('countryId')
                        })).sort(sortFunction);

                        // Clear the existing lists
                        buyerCountriesList.innerHTML = '';
                        supplierCountriesList.innerHTML = '';

                        // Rebuild the buyer countries list
                        buyerCountries.forEach(country => {
                            buyerCountriesList.appendChild(country.element);
                        });

                        // Rebuild the supplier countries list
                        supplierCountries.forEach(country => {
                            supplierCountriesList.appendChild(country.element);
                        });
                    }
                ]]>
            </script>

        </template>
    </data>
</odoo>